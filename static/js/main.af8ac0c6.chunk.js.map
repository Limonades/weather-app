{"version":3,"sources":["containers/App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","getData","setState","search","handleChange","target","value","state","fetch","concat","then","response","json","console","log","data","temp","catch","error","_this$state","react_default","a","createElement","onSubmit","type","onChange","style","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA6DeA,cA1Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,aAAe,SAAAC,GACbA,EAAEC,iBAEFT,EAAKU,UAELV,EAAKW,SAAS,CACZC,OAAQ,MAfEZ,EAmBda,aAAe,SAAAL,GACbR,EAAKW,SAAS,CACZC,OAAQJ,EAAEM,OAAOC,SArBPf,EAyBdU,QAAU,WAAM,IACNE,EAAWZ,EAAKgB,MAAhBJ,OACRK,MAAK,+CAAAC,OAC4CN,EAD5C,0CAGFO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJE,QAAQC,IAAIH,GAEZE,QAAQC,IAAIH,EAASI,KAAK,GAAGC,MAE7BzB,EAAKW,SAAS,CACZc,KAAML,EAASI,KAAK,GAAGC,SAG1BC,MAAMJ,QAAQK,QArCjB3B,EAAKgB,MAAQ,CACXJ,OAAQ,GACRa,KAAM,MALIzB,wEA2CL,IAAA4B,EACkBzB,KAAKa,MAAtBJ,EADDgB,EACChB,OAAQa,EADTG,EACSH,KAChB,OACEI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,SAAU7B,KAAKI,cACnBsB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASC,SAAU/B,KAAKU,aAAcE,MAAOH,IACzDiB,EAAAC,EAAAC,cAAA,UAAQE,KAAK,UAAb,WAGDR,EAAOI,EAAAC,EAAAC,cAAA,KAAGI,MAAO,CAAEC,SAAQ,GAAAlB,OAAK,GAAL,QAAgBO,EAApC,iEAA2D,aArDzDY,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.af8ac0c6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      search: '',\r\n      temp: null,\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.getData();\r\n\r\n    this.setState({\r\n      search: '',\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      search: e.target.value,\r\n    });\r\n  };\r\n\r\n  getData = () => {\r\n    const { search } = this.state;\r\n    fetch(\r\n      `https://api.weatherbit.io/v2.0/current?city=${search}&key=8fab1e8c72554b01807ac34da3e2cbfc`\r\n    )\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        console.log(response);\r\n\r\n        console.log(response.data[0].temp);\r\n\r\n        this.setState({\r\n          temp: response.data[0].temp,\r\n        });\r\n      })\r\n      .catch(console.error);\r\n  };\r\n\r\n  render() {\r\n    const { search, temp } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"search\" onChange={this.handleChange} value={search} />\r\n          <button type=\"submit\">search</button>\r\n        </form>\r\n\r\n        {temp ? <p style={{ fontSize: `${36}px` }}>{temp} градусиков</p> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}