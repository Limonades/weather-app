{"version":3,"sources":["utils/Api.js","constants/ApiConstants.js","constants/Loader.js","components/Day/index.js","containers/App.js","serviceWorker.js","index.js","constants/loader.gif"],"names":["callApi","url","options","fetch","then","response","status","json","Error","statusText","DOMAIN_URL","KEY","Loader","react_default","a","createElement","style","width","concat","src","loaderImg","alt","Day","arr","this","props","week","display","slice","map","day","index","marginRight","key","temp","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","getData","setState","search","error","isLoading","handleChange","target","value","state","console","log","data","catch","err","message","_this$state","onSubmit","type","onChange","fontSize","color","Loader_Loader","components_Day","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fb72fe31.chunk.js","sourcesContent":["export const callApi = (url, options) =>\r\n  fetch(url, options).then(response => {\r\n    if (response.status === 200) {\r\n      return response.json();\r\n    }\r\n    throw new Error(response.statusText);\r\n  });\r\n","export const DOMAIN_URL = 'https://api.weatherbit.io/v2.0';\nexport const KEY = '8fab1e8c72554b01807ac34da3e2cbfc';","import React from 'react';\r\nimport loaderImg from './loader.gif';\r\n\r\nexport const Loader = () => <img style={{ width: `${100}px` }} src={loaderImg} alt=\"loader\" />;\r\n","import React from 'react';\r\n\r\nclass Day extends React.Component {\r\n  render() {\r\n    const { arr } = this.props;\r\n    // TODO change days to actual\r\n    const week = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\r\n    return (\r\n      <div style={{ display: `flex` }}>\r\n        {arr.slice(0, 6).map((day, index) => (\r\n          <div style={{ marginRight: `36px` }} key={index}>\r\n            <p>{week[index]}</p>\r\n            <p>{day.temp}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Day;\r\n","import React from 'react';\r\nimport { callApi } from '../utils/Api';\r\nimport { DOMAIN_URL, KEY } from '../constants/ApiConstants';\r\nimport { Loader } from '../constants/Loader';\r\nimport Day from '../components/Day';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      search: 'odessa',\r\n      temp: null,\r\n      error: null,\r\n      isLoading: false,\r\n      arr: [],\r\n    };\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.getData();\r\n\r\n    this.setState({\r\n      search: '',\r\n      temp: null,\r\n      error: null,\r\n      isLoading: true,\r\n      arr: [],\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      search: e.target.value,\r\n    });\r\n  };\r\n\r\n  getData = () => {\r\n    const { search } = this.state;\r\n    callApi(`${DOMAIN_URL}/forecast/daily?city=${search}&key=${KEY}`)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          temp: response.data[0].temp,\r\n          error: null,\r\n          isLoading: false,\r\n          arr: response.data,\r\n        });\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          error: err.message,\r\n          temp: null,\r\n          isLoading: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { search, temp, error, isLoading, arr } = this.state;\r\n    console.log(arr);\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input type=\"search\" onChange={this.handleChange} value={search} />\r\n          <button type=\"submit\">search</button>\r\n        </form>\r\n\r\n        {temp ? <p style={{ fontSize: `${36}px` }}>сейчас в {temp} градусиков</p> : null}\r\n        {error ? <p style={{ fontSize: `${36}px`, color: 'brown' }}>{error}</p> : null}\r\n        {isLoading ? <Loader /> : null}\r\n        {arr ? <Day arr={arr} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/loader.0315fe01.gif\";"],"sourceRoot":""}